'name': 'Skill'
'scopeName': 'source.skill'
'fileTypes': [
    'il'
    'el'
    'ils'
    'els'
]
'patterns': [
    {
        'include': '#skls'
    }
    {
        'include': '#langrefs'
    }
    {
        'include': '#functions'
    }
    {
        'include': '#constants'
    }
    {
        'include': '#comments'
    }
    {
        'include': '#numbers'
    }
    {
        'include': '#operators'
    }
    {
        'include': '#strings'
    }
]
'repository':
    'skls':
        'patterns': [
            {
                'match': '\\baxl\\w+'
                'captures':
                    '0':
                        'name': 'markup.heading.axl.skill'
                'name': 'markup.heading.axl.skill'
            }
        ]
    'langrefs':
        'patterns': [
            {
                'match': '\\b(unique|abs|acos|add1|addDefstructClass|alias|alphalessp|alphaNumCmp|and|append|append1|apply|argc|argv|arrayp|arrayref|asin|assoc|atan|atof|atoi|atom|band|bcdp|bitfield1|bitfield|blankstrp|bnand|bnor|bnot|booleanp|bor|boundp|buildString|bxnor|bxor|car|caar|caaar|caadr|cadr|caddr|cdar|cddr|case|cdr|cdsGetInstPath|ceiling|changeWorkingDir|charToInt|clearExitProcs|close|compareTime|compress|concat|cond|cons|copy|copy_<name>|copyDefstructDeep|cos|cputime|createDir|csh|declare|declareLambda|declareNLambda|declareSQNLambda|define|defMathConstants|defprop|defstructp|defUserInitProc|deleteDir|deleteFile|difference|display|do|drain|dref|dtpr|ed|edi|edit|edl|envobj|eq|else|equal|eqv|err|error|errset|errsetstring|eval|evalstring|evenp|exists|exit|exp|expandMacro|expt|fboundp|fileLength|fileSeek|fileTell|fileTimeModified|fix|fixp|float|floatp|floor|for|forall|foreach|fprintf|fscanf|funcall|funobj|gc|gensym|geqp|get|get_filename|get_pname|get_string|getc|getchar|getCurrentTime|getd|getDirFiles|getFnWriteProtect|getFunType|getInstallPath|getLogin|getq|getqq|getTempDir|gets|getShellEnvVar|getSkillPath|getSkillVersion|getVarWriteProtect|getVersion|getWarn|getWorkingDir|go|greaterp|help|if|index|infile|inportp|inScheme|inSkill|instring|integerp|intToChar|isCallable|isDir|isExecutable|isFile|isFileEncrypted|isFileName|isInfinity|isLink|isMacro|isNaN|isReadable|isWritable|lambda|last|lconc|leftshift|length|leqp|lessp|let|let|letrec|letseq|lineread|linereadstring|list|listp|listToVector|load|loadi|loadstring|log|log10|lowerCase|makeTable|makeTempFileName|makeVector|map|mapc|mapcan|mapcar|maplist|max|measureTime|member|min|minus|minusp|mod|modulo|mprocedure|nconc|ncons|needNCells|negativep|neq|nequal|newline|nindex|not|nth|nthcdr|nthelem|null|numberp|numOpenFiles|oddp|onep|openportp|or|otherp|outfile|outportp|pairp|parseString|plist|plus|plusp|portp|postdecrement|postincrement|pprint|predecrement|preincrement|prependInstallPath|print|printf|printlev|println|procedure|procedurep|prog|prog1|prog2|progn|putd|putprop|putpropq|putpropqq|quote|quotient|random|range|read|readstring|readTable|realp|regExitAfter|regExitBefore|remainder|remd|remdq|remExitProc|remove|remprop|remq|renameFile|return|reverse|rexCompile|rexExecute|rexMagic|rexMatchAssocList|rexMatchList|rexMatchp|rexReplace|rexSubstitute|rightshift|rindex|round|rplaca|rplacd|schemeTopLevelEnv|set|setarray|setcar|setcdr|setFnWriteProtect|setof|setplist|setq|setqbitfield1|setqbitfield|setShellEnvVar|setSkillPath|sh|simplifyFilename|sin|sort|sortcar|sprintf|sqrt|srandom|sstatus|status|strcat|strcmp|stringp|stringToFunction|stringToSymbol|stringToTime|strlen|strncat|strncmp|sub1|subst|substring|sxtd|symbolp|symbolToString|symeval|symstrp|system|tablep|tableToList|tailp|tan|tconc|times|timeToString|timeToTm|tmToTime|truncate|type,|unalias|unless|upperCase|vector|vectorp|vectorToList|vi|warn|when|while|write|writeTable|xcons|xdifference|xplus|xquotient|xtimes|zerop|zxtd|class|delete|explicit|friend|inline|then)\\b'
                'name': 'keyword.control.langref.skill'
            }
        ]
    'functions':
        'patterns': [
            {
                'match': '(\\b(?i:(defun|defmacro|defstruct|defclass|defmethod|defconstant|defvar))\\b)(\\s+)((\\w|\\-|\\!|\\?)*)'
                'captures':
                    '2':
                        'name': 'storage.type.function-type.skill'
                    '4':
                        'name': 'entity.name.function.skill'
            }
            {
                'match': '\\b(\\w+)(\\()'
                'captures':
                  '1':
                    'name': 'entity.name.function.skill'
                  '2':
                    'name': 'none.skill'
            }
        ]
    'numbers':
        'patterns': [
            {
                'match': '\\b((([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b'
                'name': 'constant.numeric.skill'
            }
        ]
    'constants':
        'patterns': [
            {
                'match': '(#)(\\w|[\\\\+-=<>\'"&#])+'
                'captures':
                    '1':
                        'name': 'punctuation.definition.constant.skill'
                'name': 'constant.character.skill'
            }
            {
                'match': '\\b(?i:t|nil)\\b'
                'name': 'constant.language.boolean.nil.skill'
            }
        ]
    'operators':
        'patterns': [
            {
                'match': '`\\w+|`|->|~>|:|\\?|\\.'
                'name': 'variable.interpolation.symbols.skill'
                'comment': ''
            }
            {
                'match': '=|\\+|-|/|\\*|\\^|\\%'
                'name': 'variable.interpolation.math.skill'
            }
            {
                'match': '!|==|!=|\\|\\||&&|\\>|\\<'
                'name': 'variable.interpolation.logic.skill'
            }
            {
              'match': '\\(|\\)|\\[|\\]|\\{|\\}'
              'name': 'constant.other.symbol.others.skill'
            }
        ]
    'strings':
        'patterns': [
            {
                'begin': '"'
                'beginCaptures':
                    '0':
                        'name': 'string.double-qoute.begin.skill'
                'end': '"'
                'endCaptures':
                    '0':
                        'name': 'string.double-qoute.end.skill'
                'name': 'string.double-qoute.skill'
                'patterns': [
                    {
                        'match': '\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
                        'name': 'constant.character.escape.skill'
                    }
                    {
                        'match': '[^"]*[^\\n\\r"\\\\]$'
                        'name': 'invalid.illegal.string.skill'
                    }
                ]
            }
        ]
    'comments':
        'patterns': [
            {
                'begin': '/\\*'
                'captures':
                    '0':
                        'name': 'comment.block.skill'
                'end': '\\*/'
                'name': 'comment.block.skill'
            }
            {
                'match': '(;).*$\\n?'
                'captures':
                    '1':
                        'name': 'punctuation.definition.comment.skill'
                'name': 'comment.line.semicolon.skill'
            }
        ]
